@using Microsoft.AspNetCore.Identity
@using RTS.Store.Data.Models
@using RTS.Store.Services.Data.Interfaces;
@using RTS.Store.Web.Infrastricture.Extensions
@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@inject ISellerService SellerService
@{
    var userId = this.User.GetId()!;
    var isUserSeller = await this.SellerService.SellerExistByUserIdAsync(userId);
}
<ul class="navbar-nav">
@if (SignInManager.IsSignedIn(User))
{
        @if (isUserSeller)
        {
            <li class="nav-item">
                <a class="nav-link text-dark" asp-area="" asp-controller="Product" asp-action="Add">Add Product</a>
            </li>
            <li class="nav-item">
                <a class="nav-link text-dark" asp-area="" asp-controller="Seller" asp-action="Become">Becom Seller</a>
            </li>

        }
    <li class="nav-item">
        <a  class="nav-link text-dark" >Hello @User.Identity?.Name!</a>
    </li>
    <li class="nav-item">
        <form  class="form-inline" asp-area="Identity" asp-page="/Account/Logout" asp-route-returnUrl="@Url.Action("Index", "Home", new { area = "" })">
            <button  type="submit" class="nav-link btn btn-link text-dark">Logout</button>
        </form>
    </li>
}
else
{
    <li class="nav-item">
        <a class="nav-link text-dark" asp-controller="User" asp-action="Register">Register</a>
    </li>
    <li class="nav-item">
        <a class="nav-link text-dark" asp-controller="User" asp-action="Login">Login</a>
    </li>
}
</ul>
